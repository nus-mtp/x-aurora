/* Generated By:JavaCC: Do not edit this line. XauroraParser.java */
package xaurora.text;
import org.apache.lucene.document.Document;
import xaurora.text.TextIndexer;

public class XauroraParser implements XauroraParserConstants {

  private static XauroraParser instance = null;
  private static String number = "";
  private XauroraParser()
  {

  }
  public static XauroraParser getInstance()
  {
        if(instance == null) {
         instance = new XauroraParser();
      }
      return instance;
  }


  public static void main(String args []) throws ParseException
  {
    XauroraParser parser = new XauroraParser(System.in);


    while (true)
    {


      try
      {
        getNumber();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
                //XauroraParser.getNextToken();
        XauroraParser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        XauroraParser.ReInit(System.in);
      }
    }
  }

  static final private void parseEmails(Document doc) throws ParseException {
  Token emailInput;
  Token numberInput;
  Token words;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMAIL:
      emailInput = jj_consume_token(EMAIL);
          TextIndexer.addEmail(doc,emailInput.image);
          if(!number.equals(""))
          {
                TextIndexer.addNumber(doc,number);
                System.out.println("1 "+number);
                number = "";
          }
          System.out.println(emailInput.image);
      break;
    case WORDS:
      words = jj_consume_token(WORDS);
  if(!number.equals(""))
          {
                TextIndexer.addNumber(doc,number);
                System.out.println("2 "+number);
                System.out.println(words.image);
                number = "";
          }
      break;
    case TERM_SEPARATOR:
      jj_consume_token(TERM_SEPARATOR);
  if(!number.equals(""))
          {
                TextIndexer.addNumber(doc,number);
                System.out.println("3 "+number);
                number = "";
          }
      break;
    case CHARACTERS:
      jj_consume_token(CHARACTERS);
  if(!number.equals(""))
          {
                TextIndexer.addNumber(doc,number);
                System.out.println("4 "+number);
                number = "";
          }
      break;
    case 39:
      jj_consume_token(39);
      jj_consume_token(WORDS);
  if(!number.equals(""))
          {
                TextIndexer.addNumber(doc,number);
                System.out.println("5 "+number);
                number = "";
          }
      break;
    case INTEGER_LITERAL:
      numberInput = jj_consume_token(INTEGER_LITERAL);
  number += numberInput.image;
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void getNumber() throws ParseException {
  Token numberInput;
    numberInput = jj_consume_token(INTEGER_LITERAL);
        System.out.println(numberInput.image);
  }

  static final public void parseEmailInSentence(Document doc) throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER_LITERAL:
      case TERM_SEPARATOR:
      case CHARACTERS:
      case EMAIL:
      case WORDS:
      case 39:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      parseEmails(doc);
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SENTENCE_TERMINATOR:
      jj_consume_token(SENTENCE_TERMINATOR);
      break;
    case 0:
      jj_consume_token(0);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }

  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public XauroraParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x80000000,0x80000000,0x1,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xf4,0xf4,0x8,};
   }

  /** Constructor with InputStream. */
  public XauroraParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public XauroraParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new XauroraParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public XauroraParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new XauroraParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public XauroraParser(XauroraParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(XauroraParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[40];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 40; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
